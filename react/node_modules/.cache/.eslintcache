[{"/Users/parkchan/Desktop/coding/firstcollabo/react/src/index.js":"1","/Users/parkchan/Desktop/coding/firstcollabo/react/src/App.js":"2","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Logout.js":"3","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/EveryBoardPage.js":"4","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Signin.js":"5","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/EveryBoardList.js":"6","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Home.js":"7","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Login.js":"8","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/newpost.js":"9","/Users/parkchan/Desktop/coding/firstcollabo/react/src/components/Navi.js":"10","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/postDetail.js":"11","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/MyPosts.js":"12","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/MyComment.js":"13"},{"size":197,"mtime":1643091662113,"results":"14","hashOfConfig":"15"},{"size":1514,"mtime":1643283188253,"results":"16","hashOfConfig":"15"},{"size":171,"mtime":1643094859539,"results":"17","hashOfConfig":"15"},{"size":2739,"mtime":1643269242277,"results":"18","hashOfConfig":"15"},{"size":3084,"mtime":1643097677066,"results":"19","hashOfConfig":"15"},{"size":2219,"mtime":1643283220770,"results":"20","hashOfConfig":"15"},{"size":134,"mtime":1643093753089,"results":"21","hashOfConfig":"15"},{"size":2072,"mtime":1643097877206,"results":"22","hashOfConfig":"15"},{"size":2351,"mtime":1643281970712,"results":"23","hashOfConfig":"15"},{"size":951,"mtime":1643190141897,"results":"24","hashOfConfig":"15"},{"size":4730,"mtime":1643282301328,"results":"25","hashOfConfig":"15"},{"size":2502,"mtime":1643282756978,"results":"26","hashOfConfig":"15"},{"size":2609,"mtime":1643283192034,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tv3s79",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"/Users/parkchan/Desktop/coding/firstcollabo/react/src/index.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/App.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Logout.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/EveryBoardPage.js",["59"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router\";\nimport Navi from \"../components/Navi\";\n\nfunction EveryBoardPage() {\n  const { name } = useParams();\n  const [index, setIndex] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [firstLoading, setFirstLoading] = useState(true);\n  const [posts, setPosts] = useState([]);\n  const numOfPosts = 20;\n  const [scrollTop, setScrollTop] = useState(0);\n  const universityname = sessionStorage.getItem(\"universityname\");\n\n  const onScroll = () => {\n    setScrollTop(document.documentElement.scrollTop);\n  };\n\n  const getPosts = async () => {\n    const futurePosts = (\n      await axios.get(\n        `/getposts/${universityname}/${name}/${index}/${numOfPosts}`\n      )\n    ).data;\n    setPosts((currentPosts) => [...currentPosts, ...futurePosts]);\n    setIndex((current) => current + 1);\n    setLoading(false);\n    setFirstLoading(false);\n  };\n  useEffect(() => {\n    window.removeEventListener(\"scroll\", onScroll);\n    window.addEventListener(\"scroll\", onScroll, { passive: true });\n    if (\n      window.innerHeight + document.documentElement.scrollTop ===\n      document.scrollingElement.scrollHeight\n    ) {\n      setLoading(true);\n      getPosts();\n    }\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [scrollTop]);\n  return (\n    <div>\n      <Navi />\n      {firstLoading ? (\n        <div>loading...</div>\n      ) : (\n        <div>\n          <Button\n            variant=\"light\"\n            style={{ margin: \"30px 30px 0px 30px\", width: \"80%\" }}\n            href={`/${name}/newpost`}\n          >\n            게시글 작성\n          </Button>\n          <Table style={{ margin: \"0px 30px 30px 30px\", width: \"80%\" }}>\n            <thead>\n              <tr>\n                <th style={{ width: \"60%\" }}>제목</th>\n                <th style={{ width: \"20%\" }}>작성자</th>\n                <th style={{ width: \"20%\" }}>좋아요</th>\n              </tr>\n            </thead>\n            <tbody>\n              {posts.map((post) => (\n                <tr\n                  id={post.id}\n                  onClick={() => {\n                    document.location.href = `/post/${post.id}`;\n                  }}\n                  style={{ height: \"50px\" }}\n                >\n                  <td>{post.title}</td>\n                  <td>{post.username}</td>\n                  <td>{post.likes}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          {loading ? <div>loading</div> : null}\n          <div style={{ height: \"70px\" }}></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EveryBoardPage;\n","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Signin.js",["60"],"import axios from \"axios\";\nimport Button from \"react-bootstrap/Button\";\nimport { useEffect, useState } from \"react\";\n\nfunction Signin() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [universityename, setUniversityename] = useState(\"\");\n  const [universitykname, setUniversitykname] = useState(\"\");\n  const [universities, setUniversities] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const getUniversities = async () => {\n    const data = (await axios.get(\"/universities\")).data;\n    console.log(data);\n    setUniversities(data);\n\n    setLoading(false);\n  };\n  const handleUsername = (event) => {\n    setUsername(event.target.value);\n  };\n  const handlePassword = (event) => {\n    setPassword(event.target.value);\n  };\n  const handleUniversityname = (event) => {\n    setUniversitykname(event.target.value.split(\" \")[0]);\n    setUniversityename(event.target.value.split(\" \")[1]);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    const data = await axios.post(\"/signin\", {\n      username: username,\n      password: password,\n      universityname: universityename,\n    });\n    document.location.href = \"/login\";\n  };\n\n  useEffect(() => getUniversities(), []);\n  return (\n    <div style={{ display: \"flex\", height: \"100%\", width: \"100%\" }}>\n      {loading ? (\n        <div>loading</div>\n      ) : (\n        <form\n          onSubmit={onSubmit}\n          style={{\n            width: \"300px\",\n            height: \"300px\",\n            margin: \"auto\",\n          }}\n        >\n          <h1 class=\"h3 mb-3 fw-normal\">Please sign in</h1>\n\n          <div class=\"form-floating\">\n            <input\n              value={username}\n              onChange={handleUsername}\n              type=\"text\"\n              class=\"form-control\"\n              id=\"username\"\n              placeholder=\"username\"\n            />\n            <label for=\"floatingInput\">Username</label>\n          </div>\n          <div class=\"form-floating\">\n            <input\n              value={password}\n              onChange={handlePassword}\n              type=\"password\"\n              class=\"form-control\"\n              id=\"password\"\n              placeholder=\"Password\"\n            />\n            <label for=\"floatingPassword\">Password</label>\n          </div>\n          <div>\n            <input\n              value={universitykname}\n              onChange={handleUniversityname}\n              type=\"text\"\n              class=\"form-control\"\n              id=\"universityname\"\n              placeholder=\"University Name\"\n              list=\"universitylist\"\n            />\n            <datalist id=\"universitylist\">\n              {universities.map((university) => (\n                <option\n                  value={`${university.kname}대학교 ${university.ename}`}\n                />\n              ))}\n            </datalist>\n          </div>\n          <Button class=\"w-100 btn btn-lg btn-secondary\" type=\"submit\">\n            Sign in\n          </Button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default Signin;\n","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/EveryBoardList.js",["61"],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Home.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Login.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/newpost.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/components/Navi.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/postDetail.js",["62"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router\";\nimport Navi from \"../components/Navi\";\n\nfunction PostDetail() {\n  const { id } = useParams();\n  const username = sessionStorage.getItem(\"username\");\n  const [postDetail, setPostDetail] = useState({});\n  const [postLikes, setPostLikes] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n\n  const getPostDetail = async () => {\n    const futurePosts = (await axios.get(`/postdetail/${id}`)).data;\n    const futureComments = (await axios.get(`/comments/post/${id}`)).data;\n    setPostDetail(futurePosts);\n    setPostLikes(futurePosts.likes);\n    setComments(futureComments);\n    setLoading(false);\n  };\n  const handleLikes = async () => {\n    const response = (await axios.post(`/postdetail/${id}/likes`)).data;\n    setPostLikes(response[0].likes);\n  };\n  const changeNewComment = (event) => {\n    setNewComment(event.target.value);\n  };\n  const submitNewComment = async () => {\n    const futureComments = (\n      await axios.post(`/comments/post/${id}`, {\n        username: username,\n        content: newComment,\n        localdate: new Date().toISOString().slice(0, 19).replace(\"T\", \" \"),\n      })\n    ).data;\n    setNewComment(\"\");\n    setComments(futureComments);\n  };\n  useEffect(() => getPostDetail(), []);\n  return (\n    <div>\n      <Navi />\n      {loading ? (\n        <h2>Loading</h2>\n      ) : (\n        <div\n          style={{\n            margin: \"20px\",\n            width: \"calc(100% - 240px)\",\n          }}\n        >\n          <h5\n            style={{\n              paddingBottom: \"15px\",\n              borderBottomStyle: \"solid\",\n              borderBottomWidth: \"3px\",\n              width: \"100%\",\n            }}\n          >\n            {postDetail.kname}\n          </h5>\n          <br></br>\n          <div\n            style={{\n              float: \"left\",\n              paddingBottom: \"10px\",\n              borderBottomStyle: \"solid\",\n              borderBottomWidth: \"1.5px\",\n              width: \"100%\",\n              marginBottom: \"20px\",\n            }}\n          >\n            <h5\n              style={{\n                float: \"left\",\n              }}\n            >\n              {postDetail.title}\n            </h5>\n            <h5\n              style={{\n                float: \"right\",\n              }}\n            >\n              {postDetail.username}\n            </h5>\n          </div>\n\n          <p\n            style={{\n              paddingBottom: \"20px\",\n              borderBottomStyle: \"solid\",\n              borderBottomWidth: \"1.5px\",\n              width: \"100%\",\n              marginBottom: \"20px\",\n            }}\n          >\n            {postDetail.content}\n          </p>\n          <div style={{ height: \"30px\" }}></div>\n          <Button\n            onClick={handleLikes}\n            variant=\"info\"\n          >{`좋아요 ${postLikes}`}</Button>\n          <div style={{ height: \"30px\" }}></div>\n          <div>\n            <h5\n              style={{\n                paddingBottom: \"15px\",\n                borderBottomStyle: \"solid\",\n                borderBottomWidth: \"3px\",\n                width: \"100%\",\n              }}\n            >\n              {`댓글 수: ${comments.length}`}\n            </h5>\n            {comments.map((comment) => (\n              <div\n                style={{\n                  margin: \"5px\",\n                }}\n              >\n                <p style={{ width: \"10%\", float: \"left\" }}>\n                  {comment.username}\n                </p>\n                <p style={{ width: \"90%\", float: \"right\" }}>\n                  {comment.content}\n                </p>\n              </div>\n            ))}\n          </div>\n          <div style={{ padding: \"20px 0px 20px 0px\" }}>\n            <textarea\n              style={{\n                lineHeight: \"20px\",\n                padding: \"0 5px\",\n                resize: \"none\",\n                width: \"calc(100% - 60px)\",\n                float: \"left\",\n                height: \"70px\",\n              }}\n              value={newComment}\n              onChange={changeNewComment}\n              type=\"text\"\n              class=\"form-control\"\n              id=\"newComment\"\n              maxLength=\"120\"\n            ></textarea>\n            <Button\n              onClick={submitNewComment}\n              style={{ height: \"70px\", width: \"60px\", float: \"right\" }}\n              class=\"w-100 btn btn-lg btn-secondary\"\n            >\n              댓글 등록\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default PostDetail;\n","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/MyPosts.js",["63"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { useParams } from \"react-router\";\nimport Navi from \"../components/Navi\";\n\nfunction MyPosts() {\n  const { username } = useParams();\n  const sessionName = sessionStorage.getItem(\"username\");\n  if (username !== sessionName) {\n    alert(\"다시 로그인 해주세요\");\n    document.location.href = \"/everyboardlist\";\n  }\n  const [index, setIndex] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [firstLoading, setFirstLoading] = useState(true);\n  const [posts, setPosts] = useState([]);\n  const numOfPosts = 20;\n  const [scrollTop, setScrollTop] = useState(0);\n\n  const onScroll = () => {\n    setScrollTop(document.documentElement.scrollTop);\n  };\n\n  const getPosts = async () => {\n    const futurePosts = (\n      await axios.get(`/getposts/user/${username}/${index}/${numOfPosts}`)\n    ).data;\n    setPosts((currentPosts) => [...currentPosts, ...futurePosts]);\n    setIndex((current) => current + 1);\n    setLoading(false);\n    setFirstLoading(false);\n  };\n  useEffect(() => {\n    window.removeEventListener(\"scroll\", onScroll);\n    window.addEventListener(\"scroll\", onScroll, { passive: true });\n    if (\n      window.innerHeight + document.documentElement.scrollTop ===\n      document.scrollingElement.scrollHeight\n    ) {\n      setLoading(true);\n      getPosts();\n    }\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [scrollTop]);\n  return (\n    <div>\n      <Navi />\n      {firstLoading ? (\n        <div>loading...</div>\n      ) : (\n        <div>\n          <Table style={{ margin: \"0px 30px 30px 30px\", width: \"80%\" }}>\n            <thead>\n              <tr>\n                <th style={{ width: \"60%\" }}>제목</th>\n                <th style={{ width: \"40%\" }}>좋아요</th>\n              </tr>\n            </thead>\n            <tbody>\n              {posts.map((post) => (\n                <tr\n                  id={post.id}\n                  onClick={() => {\n                    document.location.href = `/post/${post.id}`;\n                  }}\n                  style={{ height: \"50px\" }}\n                >\n                  <td>{post.title}</td>\n                  <td>{post.likes}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          {loading ? <div>loading</div> : null}\n          <div style={{ height: \"70px\" }}></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MyPosts;\n","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/MyComment.js",["64"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { useParams } from \"react-router\";\nimport Navi from \"../components/Navi\";\n\nfunction MyComments() {\n  const { username } = useParams();\n  const sessionName = sessionStorage.getItem(\"username\");\n  if (username !== sessionName) {\n    alert(\"다시 로그인 해주세요\");\n    document.location.href = \"/everyboardlist\";\n  }\n  const [index, setIndex] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [firstLoading, setFirstLoading] = useState(true);\n  const [posts, setPosts] = useState([]);\n  const numOfPosts = 20;\n  const [scrollTop, setScrollTop] = useState(0);\n\n  const onScroll = () => {\n    setScrollTop(document.documentElement.scrollTop);\n  };\n\n  const getPosts = async () => {\n    const futurePosts = (\n      await axios.get(`/getcomments/user/${username}/${index}/${numOfPosts}`)\n    ).data;\n    setPosts((currentPosts) => [...currentPosts, ...futurePosts]);\n    setIndex((current) => current + 1);\n    setLoading(false);\n    setFirstLoading(false);\n  };\n  useEffect(() => {\n    window.removeEventListener(\"scroll\", onScroll);\n    window.addEventListener(\"scroll\", onScroll, { passive: true });\n    if (\n      window.innerHeight + document.documentElement.scrollTop ===\n      document.scrollingElement.scrollHeight\n    ) {\n      setLoading(true);\n      getPosts();\n    }\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [scrollTop]);\n  return (\n    <div>\n      <Navi />\n      {firstLoading ? (\n        <div>loading...</div>\n      ) : (\n        <div>\n          <Table style={{ margin: \"0px 30px 30px 30px\", width: \"80%\" }}>\n            <thead>\n              <tr>\n                <th style={{ width: \"80%\" }}>댓글 내용</th>\n                <th style={{ width: \"20%\" }}>좋아요</th>\n              </tr>\n            </thead>\n            <tbody>\n              {posts.map((post) => (\n                <tr\n                  id={post.id}\n                  onClick={() => {\n                    document.location.href = `/post/${post.id}`;\n                  }}\n                  style={{ height: \"50px\" }}\n                >\n                  <td>\n                    <h5>{post.title}</h5>\n                    <p>{post.content}</p>\n                  </td>\n                  <td>{post.likes}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          {loading ? <div>loading</div> : null}\n          <div style={{ height: \"70px\" }}></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MyComments;\n",{"ruleId":"65","severity":1,"message":"66","line":43,"column":6,"nodeType":"67","endLine":43,"endColumn":17,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":31,"column":11,"nodeType":"71","messageId":"72","endLine":31,"endColumn":15},{"ruleId":"65","severity":1,"message":"73","line":29,"column":32,"nodeType":"67","endLine":29,"endColumn":34,"suggestions":"74"},{"ruleId":"65","severity":1,"message":"75","line":42,"column":36,"nodeType":"67","endLine":42,"endColumn":38,"suggestions":"76"},{"ruleId":"65","severity":1,"message":"66","line":45,"column":6,"nodeType":"67","endLine":45,"endColumn":17,"suggestions":"77"},{"ruleId":"65","severity":1,"message":"66","line":45,"column":6,"nodeType":"67","endLine":45,"endColumn":17,"suggestions":"78"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array.","ArrayExpression",["79"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getBoards'. Either include it or remove the dependency array.",["80"],"React Hook useEffect has a missing dependency: 'getPostDetail'. Either include it or remove the dependency array.",["81"],["82"],["83"],{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"84","fix":"90"},{"desc":"84","fix":"91"},"Update the dependencies array to be: [getPosts, scrollTop]",{"range":"92","text":"93"},"Update the dependencies array to be: [getBoards]",{"range":"94","text":"95"},"Update the dependencies array to be: [getPostDetail]",{"range":"96","text":"97"},{"range":"98","text":"93"},{"range":"99","text":"93"},[1401,1412],"[getPosts, scrollTop]",[958,960],"[getBoards]",[1471,1473],"[getPostDetail]",[1468,1479],[1474,1485]]