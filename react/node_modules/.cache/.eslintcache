[{"/Users/parkchan/Desktop/coding/firstcollabo/react/src/index.js":"1","/Users/parkchan/Desktop/coding/firstcollabo/react/src/App.js":"2","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Logout.js":"3","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/EveryBoardPage.js":"4","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Signin.js":"5","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/EveryBoardList.js":"6","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Home.js":"7","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Login.js":"8","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/newpost.js":"9","/Users/parkchan/Desktop/coding/firstcollabo/react/src/components/Navi.js":"10"},{"size":197,"mtime":1643091662113,"results":"11","hashOfConfig":"12"},{"size":1112,"mtime":1643104232261,"results":"13","hashOfConfig":"12"},{"size":171,"mtime":1643094859539,"results":"14","hashOfConfig":"12"},{"size":2749,"mtime":1643104882659,"results":"15","hashOfConfig":"12"},{"size":3084,"mtime":1643097677066,"results":"16","hashOfConfig":"12"},{"size":2032,"mtime":1643101493470,"results":"17","hashOfConfig":"12"},{"size":134,"mtime":1643093753089,"results":"18","hashOfConfig":"12"},{"size":2072,"mtime":1643097877206,"results":"19","hashOfConfig":"12"},{"size":2439,"mtime":1643105623749,"results":"20","hashOfConfig":"12"},{"size":951,"mtime":1643190020257,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tv3s79",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/parkchan/Desktop/coding/firstcollabo/react/src/index.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/App.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Logout.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/EveryBoardPage.js",["45"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router\";\nimport Navi from \"../components/Navi\";\n\nfunction EveryBoardPage() {\n  const { name } = useParams();\n  const [index, setIndex] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [firstLoading, setFirstLoading] = useState(true);\n  const [posts, setPosts] = useState([]);\n  const numOfPosts = 20;\n  const [scrollTop, setScrollTop] = useState(0);\n  const universityname = sessionStorage.getItem(\"universityname\");\n\n  const onScroll = () => {\n    console.log(\"scrolling\");\n    setScrollTop(document.documentElement.scrollTop);\n  };\n\n  const getPosts = async () => {\n    const futurePosts = (\n      await axios.get(\n        `/getposts/${universityname}/${name}/${index}/${numOfPosts}`\n      )\n    ).data;\n    setPosts((currentPosts) => [...currentPosts, ...futurePosts]);\n    setIndex((current) => current + 1);\n    setLoading(false);\n    setFirstLoading(false);\n  };\n  useEffect(() => {\n    window.removeEventListener(\"scroll\", onScroll);\n    window.addEventListener(\"scroll\", onScroll, { passive: true });\n    if (\n      window.innerHeight + document.documentElement.scrollTop ===\n      document.scrollingElement.scrollHeight\n    ) {\n      console.log(\"update\");\n      setLoading(true);\n      getPosts();\n    }\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [scrollTop]);\n  return (\n    <div>\n      <Navi />\n      {firstLoading ? (\n        <div>loading...</div>\n      ) : (\n        <div>\n          <Button\n            variant=\"light\"\n            style={{ margin: \"30px 30px 0px 30px\", width: \"80%\" }}\n            href={`/${name}/newpost`}\n          >\n            게시글 작성\n          </Button>\n          <Table style={{ margin: \"0px 30px 30px 30px\", width: \"80%\" }}>\n            <thead>\n              <tr>\n                <th style={{ width: \"60%\" }}>제목</th>\n                <th style={{ width: \"20%\" }}>작성자</th>\n                <th style={{ width: \"20%\" }}>좋아요</th>\n              </tr>\n            </thead>\n            <tbody>\n              {posts.map((post) => (\n                <tr\n                  id={post.id}\n                  onClick={() => {\n                    document.location.href = `/post/${post.id}`;\n                  }}\n                  style={{ height: \"50px\" }}\n                >\n                  <td>{post.title}</td>\n                  <td>{post.username}</td>\n                  <td>{post.likes}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          {loading ? <div>loading</div> : null}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EveryBoardPage;\n","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Signin.js",["46"],"import axios from \"axios\";\nimport Button from \"react-bootstrap/Button\";\nimport { useEffect, useState } from \"react\";\n\nfunction Signin() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [universityename, setUniversityename] = useState(\"\");\n  const [universitykname, setUniversitykname] = useState(\"\");\n  const [universities, setUniversities] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const getUniversities = async () => {\n    const data = (await axios.get(\"/universities\")).data;\n    console.log(data);\n    setUniversities(data);\n\n    setLoading(false);\n  };\n  const handleUsername = (event) => {\n    setUsername(event.target.value);\n  };\n  const handlePassword = (event) => {\n    setPassword(event.target.value);\n  };\n  const handleUniversityname = (event) => {\n    setUniversitykname(event.target.value.split(\" \")[0]);\n    setUniversityename(event.target.value.split(\" \")[1]);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    const data = await axios.post(\"/signin\", {\n      username: username,\n      password: password,\n      universityname: universityename,\n    });\n    document.location.href = \"/login\";\n  };\n\n  useEffect(() => getUniversities(), []);\n  return (\n    <div style={{ display: \"flex\", height: \"100%\", width: \"100%\" }}>\n      {loading ? (\n        <div>loading</div>\n      ) : (\n        <form\n          onSubmit={onSubmit}\n          style={{\n            width: \"300px\",\n            height: \"300px\",\n            margin: \"auto\",\n          }}\n        >\n          <h1 class=\"h3 mb-3 fw-normal\">Please sign in</h1>\n\n          <div class=\"form-floating\">\n            <input\n              value={username}\n              onChange={handleUsername}\n              type=\"text\"\n              class=\"form-control\"\n              id=\"username\"\n              placeholder=\"username\"\n            />\n            <label for=\"floatingInput\">Username</label>\n          </div>\n          <div class=\"form-floating\">\n            <input\n              value={password}\n              onChange={handlePassword}\n              type=\"password\"\n              class=\"form-control\"\n              id=\"password\"\n              placeholder=\"Password\"\n            />\n            <label for=\"floatingPassword\">Password</label>\n          </div>\n          <div>\n            <input\n              value={universitykname}\n              onChange={handleUniversityname}\n              type=\"text\"\n              class=\"form-control\"\n              id=\"universityname\"\n              placeholder=\"University Name\"\n              list=\"universitylist\"\n            />\n            <datalist id=\"universitylist\">\n              {universities.map((university) => (\n                <option\n                  value={`${university.kname}대학교 ${university.ename}`}\n                />\n              ))}\n            </datalist>\n          </div>\n          <Button class=\"w-100 btn btn-lg btn-secondary\" type=\"submit\">\n            Sign in\n          </Button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default Signin;\n","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/EveryBoardList.js",["47"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Navi from \"../components/Navi\";\nimport { Button } from \"react-bootstrap\";\n\nfunction EveryBoardList() {\n  const username = sessionStorage.getItem(\"username\");\n  const universityname = sessionStorage.getItem(\"universityname\");\n  if (username === null || universityname === null) {\n    alert(\"로그인 해주세요\");\n    document.location.href = \"/\";\n  }\n  const [boards, setBoards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const getBoards = async () => {\n    const response = (await axios.get(`/everyboards/${universityname}`)).data;\n    setBoards(response);\n    setLoading(false);\n  };\n  const buttonListStyle = {\n    width: \"400px\",\n    border: \"1px solid\",\n    borderColor: \"rgba(240, 240, 240)\",\n    borderRadius: \"30px\",\n    padding: \"5px\",\n    margin: \"30px 0px 30px 0px\",\n  };\n  const buttonStyle = { margin: \"5px 20% 5px 20%\" };\n  useEffect(() => getBoards(), []);\n  return (\n    <div>\n      <Navi />\n      {loading ? null : (\n        <div\n          style={{\n            marginLeft: \"calc(50% - 200px)\",\n            marginRight: \"calc(50% - 200px)\",\n          }}\n        >\n          {username !== null ? (\n            <div style={buttonListStyle}>\n              <Button variant=\"light\" style={buttonStyle}>\n                내가 쓴 글\n              </Button>\n              <Button variant=\"light\" style={buttonStyle}>\n                댓글 단 글\n              </Button>\n              <Button variant=\"light\" style={buttonStyle}>\n                스크랩\n              </Button>\n            </div>\n          ) : null}\n          <div style={buttonListStyle}>\n            {boards.map((board) => (\n              <Button\n                href={`/everyboard/${board.ename}`}\n                variant=\"light\"\n                style={buttonStyle}\n              >\n                {board.kname}\n              </Button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EveryBoardList;\n","/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Home.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/Login.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/routes/newpost.js",[],"/Users/parkchan/Desktop/coding/firstcollabo/react/src/components/Navi.js",[],{"ruleId":"48","severity":1,"message":"49","line":45,"column":6,"nodeType":"50","endLine":45,"endColumn":17,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":31,"column":11,"nodeType":"54","messageId":"55","endLine":31,"endColumn":15},{"ruleId":"48","severity":1,"message":"56","line":29,"column":32,"nodeType":"50","endLine":29,"endColumn":34,"suggestions":"57"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array.","ArrayExpression",["58"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getBoards'. Either include it or remove the dependency array.",["59"],{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [getPosts, scrollTop]",{"range":"64","text":"65"},"Update the dependencies array to be: [getBoards]",{"range":"66","text":"67"},[1460,1471],"[getPosts, scrollTop]",[958,960],"[getBoards]"]